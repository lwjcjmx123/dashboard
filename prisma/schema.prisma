// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:msLwj123@127.0.0.1/dashboard?statusColor=F8F8F8&env=local&name=local&tLSMode=0&usePrivateKey=false&safeModeLevel=0&advancedSafeModeLevel=0&driverVersion=0&lazyload=false"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks            Task[]
  events           Event[]
  bills            Bill[]
  expenses         Expense[]
  notes            Note[]
  pomodoroSessions PomodoroSession[]
  settings         UserSettings?

  @@map("users")
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?
  completed     Boolean   @default(false)
  priority      Priority  @default(NOT_URGENT_IMPORTANT)
  dueDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  timeSpent     Int       @default(0) // in minutes
  estimatedTime Int? // in minutes
  parentId      String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tags     TaskTag[]
  subtasks SubTask[]
  parent   Task?     @relation("TaskHierarchy", fields: [parentId], references: [id])
  children Task[]    @relation("TaskHierarchy")

  @@map("tasks")
}

model SubTask {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model TaskTag {
  id   String @id @default(cuid())
  name String

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_tags")
}

model Event {
  id          String        @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  category    EventCategory @default(PERSONAL)
  color       String        @default("#3B82F6")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  recurrence RecurrencePattern?

  @@map("events")
}

model RecurrencePattern {
  id        String         @id @default(cuid())
  frequency RecurrenceFreq
  interval  Int            @default(1)
  endDate   DateTime?
  count     Int?

  eventId String @unique
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("recurrence_patterns")
}

model Bill {
  id        String    @id @default(cuid())
  title     String
  amount    Float
  currency  String    @default("USD")
  dueDate   DateTime
  category  String
  recurring Boolean   @default(false)
  paid      Boolean   @default(false)
  paidDate  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bills")
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  amount      Float
  currency    String   @default("USD")
  category    String
  date        DateTime
  description String?
  createdAt   DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tags ExpenseTag[]

  @@map("expenses")
}

model ExpenseTag {
  id   String @id @default(cuid())
  name String

  expenseId String
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("expense_tags")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  archived  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tags NoteTags[]

  @@map("notes")
}

model NoteTags {
  id   String @id @default(cuid())
  name String

  noteId String
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@map("note_tags")
}

model PomodoroSession {
  id        String      @id @default(cuid())
  duration  Int // in minutes
  startTime DateTime
  endTime   DateTime
  completed Boolean     @default(false)
  notes     String?
  type      SessionType @default(WORK)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pomodoro_sessions")
}

model UserSettings {
  id          String @id @default(cuid())
  theme       String @default("light")
  colorScheme String @default("blue")
  language    String @default("en")
  timeFormat  String @default("24")
  currency    String @default("USD")

  // Notifications
  notifyTasks    Boolean @default(true)
  notifyBills    Boolean @default(true)
  notifyPomodoro Boolean @default(true)
  notifyEvents   Boolean @default(true)

  // Pomodoro Settings
  workDuration           Int @default(25)
  shortBreakDuration     Int @default(5)
  longBreakDuration      Int @default(15)
  sessionsUntilLongBreak Int @default(4)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

enum Priority {
  URGENT_IMPORTANT
  URGENT_NOT_IMPORTANT
  NOT_URGENT_IMPORTANT
  NOT_URGENT_NOT_IMPORTANT
}

enum EventCategory {
  TASK
  BILL
  NOTE
  POMODORO
  PERSONAL
}

enum RecurrenceFreq {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum SessionType {
  WORK
  BREAK
  LONG_BREAK
}
